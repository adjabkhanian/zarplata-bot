import requests
import sqlite3
import calendar
from datetime import datetime, date, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ConversationHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from dateutil.relativedelta import relativedelta

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
BAR, RASHOD, SHTRAF = range(3)

# === Airtable –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
AIRTABLE_TOKEN = "pat0va1EYWcKoftLt.232d9d55b86b36bef62ab68e16a64bb36d6e7b64ff3a97c2ec9a983982728bbc"
AIRTABLE_BASE_ID = "appxB3WUsTmbNSlqx"
AIRTABLE_TABLE_NAME = "Zarplata"

def send_to_airtable(date_str, typ, amount, comment):
    url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {"fields": {"Date": date_str, "Type": typ, "Amount": amount, "Comment": comment}}
    requests.post(url, headers=headers, json=data)

def init_db():
    conn = sqlite3.connect("zarplata.db")
    conn.execute('''CREATE TABLE IF NOT EXISTS records (
        id INTEGER PRIMARY KEY, date TEXT, type TEXT, amount REAL, comment TEXT)''')
    conn.commit()
    conn.close()

def add_record(rec_type, amount, comment=""):
    date_str = datetime.now().strftime("%Y-%m-%d")
    conn = sqlite3.connect("zarplata.db")
    conn.execute(
        "INSERT INTO records (date, type, amount, comment) VALUES (?, ?, ?, ?)",
        (date_str, rec_type, amount, comment)
    )
    conn.commit()
    conn.close()
    send_to_airtable(date_str, rec_type, amount, comment)

# --- –°—Ç–∞—Ä—Ç / –ö–Ω–æ–ø–∫–∏ ---
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [
        [KeyboardButton("üïë –î–Ω–µ–≤–Ω–∞—è"), KeyboardButton("üåô –ù–æ—á–Ω–∞—è")],
        [KeyboardButton("üç∑ –ë–∞—Ä"), KeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üö´ –®—Ç—Ä–∞—Ñ"), KeyboardButton("üìä –û—Ç—á—ë—Ç")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def handle_buttons(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t == "üïë –î–Ω–µ–≤–Ω–∞—è":
        add_record("—Å–º–µ–Ω–∞", 2500, "–¥–Ω–µ–≤–Ω–∞—è")
        await update.message.reply_text("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    elif t == "üåô –ù–æ—á–Ω–∞—è":
        add_record("—Å–º–µ–Ω–∞", 2500, "–Ω–æ—á–Ω–∞—è")
        await update.message.reply_text("‚úÖ –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    elif t == "üç∑ –ë–∞—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞—Ä–∞:")
        return BAR
    elif t == "üí∏ –†–∞—Å—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä. ‚Äò300 –µ–¥–∞‚Äô):")
        return RASHOD
    elif t == "üö´ –®—Ç—Ä–∞—Ñ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä. ‚Äò500 –æ–ø–æ–∑–¥–∞–Ω–∏–µ‚Äô):")
        return SHTRAF
    elif t == "üìä –û—Ç—á—ë—Ç":
        now = date.today()
        last = now.replace(day=1) - timedelta(days=1)
        kb2 = [
            [InlineKeyboardButton("üìÜ –¢–µ–∫—É—â–∏–π", callback_data=f"month_0")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"month_-1")],
            [InlineKeyboardButton("üìÖ –ú–∞–π", callback_data="month_2024_5")],
            [InlineKeyboardButton("üìÖ –ê–ø—Ä–µ–ª—å", callback_data="month_2024_4")]
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(kb2))
    return ConversationHandler.END

# --- –í–≤–æ–¥ —Å—É–º–º—ã BAR, RASHOD, SHTRAF ---
async def bar_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text)
        percent = 0
        if amount < 3500:
            percent = 5
        elif 3500 <= amount < 4000:
            percent = 6
        elif 4000 <= amount < 4500:
            percent = 7
        elif 4500 <= amount < 5000:
            percent = 8
        elif 5000 <= amount < 5500:
            percent = 9
        elif 5500 <= amount < 10000:
            percent = 10
        elif amount >= 10000:
            percent = 15

        profit = amount * percent / 100
        add_record("–±–∞—Ä", profit, f"{amount}‚ÇΩ ‚Äî {percent}%")
        await update.message.reply_text(f"üç∑ –ë–∞—Ä: {amount}‚ÇΩ ‚Üí {percent}% = +{profit:.0f}‚ÇΩ")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
    return ConversationHandler.END

async def rashod_input(update: Update, ctx):
    parts = update.message.text.split(maxsplit=1)
    try:
        amt = float(parts[0])
        comm = parts[1] if len(parts) > 1 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        add_record("—Ä–∞—Å—Ö–æ–¥", -amt, comm)
        await update.message.reply_text(f"üí∏ –†–∞—Å—Ö–æ–¥: ‚àí{amt}‚ÇΩ ({comm})")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

    return ConversationHandler.END

async def shtraf_input(update: Update, ctx):
    parts = update.message.text.split(maxsplit=1)
    try:
        amt = float(parts[0])
        comm = parts[1] if len(parts) > 1 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        add_record("—à—Ç—Ä–∞—Ñ", -amt, comm)
        await update.message.reply_text(f"üö´ –®—Ç—Ä–∞—Ñ: ‚àí{amt}‚ÇΩ ({comm})")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ ---
async def month_cb(update: Update, ctx):
    q = update.callback_query
    await q.answer()
    data = q.data  # e.g. month_-1 or month_2024_5
    if data.startswith("month_"):
        _, *rest = data.split("_")
        if rest[0] in ("0", "-1"):
            offset = int(rest[0])
            tgt = date.today() + relativedelta(months=offset)
            y, m = tgt.year, tgt.month
        else:
            y, m = map(int, rest)
        start = date(y, m, 1)
        end = date(y, m, calendar.monthrange(y, m)[1])
        msg = report_from_airtable(start, end, y, m)
        await q.edit_message_text(msg)

def report_from_airtable(start, end, y, m):
    u = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
    hdr = {"Authorization": f"Bearer {AIRTABLE_TOKEN}"}
    resp = requests.get(u, headers=hdr, params={"pageSize": 100}).json()
    recs = resp.get("records", [])

    sw, bp, rs, st = 0, 0, 0, 0
    for r in recs:
        f = r.get("fields", {})
        d = f.get("Date", "")
        tp = f.get("Type", "").lower()
        am = f.get("Amount", 0)
        try:
            dt = datetime.strptime(d, "%Y-%m-%d").date()
        except:
            continue
        if not (start <= dt <= end): continue
        if tp == "—Å–º–µ–Ω–∞": sw += 1
        if tp == "–±–∞—Ä": bp += am
        if tp == "—Ä–∞—Å—Ö–æ–¥": rs += abs(am)
        if tp == "—à—Ç—Ä–∞—Ñ": st += abs(am)
    tot = sw*2500 + bp - rs - st
    return (
        f"üìä –û—Ç—á—ë—Ç {calendar.month_name[m]} {y}:\n"
        f"–°–º–µ–Ω—ã: {sw} √ó2500‚ÇΩ = {sw*2500}‚ÇΩ\n"
        f"–ë–∞—Ä: +{bp:.0f}‚ÇΩ\n"
        f"–†–∞—Å—Ö–æ–¥—ã: -{rs:.0f}‚ÇΩ\n"
        f"–®—Ç—Ä–∞—Ñ—ã: -{st:.0f}‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ: {tot:.0f}‚ÇΩ"
    )

# --- Simple echo for testing ---
async def echo(update: Update, ctx):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

async def cancel(update: Update, ctx):
    await update.message.reply_text("–û–ö, –æ—Ç–º–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token("8092177846:AAHO4f8yZTYvfDH76Ort9wmds7XeQ9kCgr0").build()
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)],
        states={
            BAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, bar_input)],
            RASHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, rashod_input)],
            SHTRAF: [MessageHandler(filters.TEXT & ~filters.COMMAND, shtraf_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(month_cb, pattern=r"^month_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã!")
    app.run_polling()